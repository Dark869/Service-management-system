"""
Django settings for services_management_system project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from decouple import config
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

CSRF_TRUSTED_ORIGINS = [
    'https://progseg25.com'
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# Fuerza a que las cookies CSRF solo se envíen por HTTPS
CSRF_COOKIE_SECURE = True
# Fuerza a que las cookies de sesión solo se envíen por HTTPS
SESSION_COOKIE_SECURE = True
# Si tu Nginx puede enviar X-Forwarded-Host (que suele ser el caso), esto ayuda a Django a resolver URLs correctamente.
USE_X_FORWARDED_HOST = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'services_management_system.routes',
    'services_management_system.views',
    'services_management_system',
    'db',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'services_management_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath('services_management_system/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'services_management_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('BD_NAME'),
        'USER': os.environ.get('BD_USER'),
        'PASSWORD': os.environ.get('BD_PASSWORD'),
        'HOST': os.environ.get('BD_HOST'),
        'PORT': os.environ.get('BD_PORT'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-MX'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = True

# Configs for session

SESSION_COOKIE_AGE = 86400

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = (BASE_DIR.joinpath('services_management_system/static'), )


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

RECAPTCHA_PRIVATE_KEY = os.environ.get('RECAPTCHA_PRIVATE_KEY')

SSH_PUBLIC = os.environ.get('SSH_PUBLIC')
SSH_PRIVATE = os.environ.get('SSH_PRIVATE')
CLAVE_OF_KEY = os.environ.get('CLAVE_OF_KEY')
FINGERPRINT = os.environ.get('FINGERPRINT')

TOKEN_BOT = os.environ.get('TOKEN_BOT')
CHAT_ID= os.environ.get('CHAT_ID')

LOGS_DIR = BASE_DIR.joinpath('.logs')
os.makedirs(LOGS_DIR, exist_ok=True)

LOG_DEFINITIONS = {
    'server_registration': {
        'filename': 'RegistroServer.log',
        'logger_name_prefix': 'registerServer',
        'level': 'INFO',
        'maxBytes': 5 * 1024 * 1024,
        'backupCount': 5,
    },
    'ssh_operations': {
        'filename': 'logSSH.log',
        'logger_name_prefix': 'SSH',
        'level': 'INFO',
        'maxBytes': 5 * 1024 * 1024,
        'backupCount': 5,
    },
    'service_registration': {
        'filename': 'RegistroServicio.log',
        'logger_name_prefix': 'RegistroServicio',
        'level': 'INFO',
        'maxBytes': 5 * 1024 * 1024,
        'backupCount': 5,
    },
    'server_administrator': {
        'filename': 'serverAdministrator.log',
        'logger_name_prefix': 'serverAdministrator',
        'level': 'INFO',
        'maxBytes': 5 * 1024 * 1024,
        'backupCount': 5,
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'custom_file_formatter': {
            'format': '%(asctime)s - %(levelname)s - [%(name)s] - %(message)s',
            'datefmt': '%d-%b-%Y %H:%M:%S',
        },
    },

    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'custom_file_formatter',
        },
    },

    'loggers': {
        '': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': True,
        },
    },
}

for key, definition in LOG_DEFINITIONS.items():
    handler_name = f'{key}_file_handler'
    log_file_path = os.path.join(LOGS_DIR, definition['filename'])

    LOGGING['handlers'][handler_name] = {
        'level': definition['level'],
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': log_file_path,
        'maxBytes': definition['maxBytes'],
        'backupCount': definition['backupCount'],
        'formatter': 'custom_file_formatter',
    }

    logger_name_to_assign = definition['logger_name_prefix']
    
    if logger_name_to_assign not in LOGGING['loggers']:
        LOGGING['loggers'][logger_name_to_assign] = {
            'handlers': [],
            'level': definition['level'],
            'propagate': False,
        }
    
    if handler_name not in LOGGING['loggers'][logger_name_to_assign]['handlers']:
        LOGGING['loggers'][logger_name_to_assign]['handlers'].append(handler_name)
